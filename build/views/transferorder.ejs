<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Transfer Orders</title>
    <link rel="stylesheet" href="/assets/transferorder-style.css">
    <link rel="stylesheet" href="/assets/sidebar.css">
    <link rel="stylesheet" href="/assets/topbar.css">
    
    <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.0.0-beta3/css/all.min.css">

    <link rel="preconnect" href="https://fonts.googleapis.com">
    <link rel="preconnect" href="https://fonts.gstatic.com" crossorigin>
    <link href="https://fonts.googleapis.com/css2?family=Dancing+Script:wght@400..700&display=swap" rel="stylesheet">
    <link rel="preconnect" href="https://fonts.googleapis.com">
    <link rel="preconnect" href="https://fonts.gstatic.com" crossorigin>
    <link href="https://fonts.googleapis.com/css2?family=IBM+Plex+Sans:ital,wght@0,100;0,200;0,300;0,400;0,500;0,600;0,700;1,100;1,200;1,300;1,400;1,500;1,600;1,700&display=swap" rel="stylesheet">
    
</head>

<body>

    <%- include('partials/topbar', {username: username, role: role} )%>
    <div class = main-fb>
        
        <%- include('partials/sidebar', {branches:branches } )%>

        <div class = "main-content">
            <h1>Transfer Orders</h1>
            <br>
            <section class="order-status">
                <div class="status for-approval">
                    <i class="fas fa-exclamation-circle"></i>
                    <div class="status-text">
                        <span class="status-label">For Approval</span>
                        <h2><%= forApproval %></h2>
                    </div>
                </div>
                
                <div class="status completed">
                    <i class="fas fa-check-circle"></i>
                    <div class="status-text">
                        <span class="status-label">Approved</span>
                        <h2><%= Approved %></h2>
                    </div>
                </div>
            </section>

            <section class="inventory-table">
                <div class="purchase-order-controls">

                    <button class="create-transfer-order" onclick="openTransferOrderModal()">
                        <i class="fas fa-plus"></i> Create Transfer Order
                        
                    </button>
                    

                    <div class="search-bar">
                        <input type="text" placeholder="Search Transfer Orders..." aria-label="Search orders">
                        <i class="fas fa-search search-icon"></i>
                    </div>
                    

                    <div class="sorting-controls">
                      <select id="sortBy" aria-label="Sort items" onchange="applySorting()">
                        <option value="alphabetical" <%= sortBy === '' || sortBy === 'alphabetical' ? 'selected' : '' %>>Alphabetical (A-Z)</option>
                        <option value="date-asc" <%= sortBy === 'date-asc' ? 'selected' : '' %>>Date (Ascending)</option>
                        <option value="date-desc" <%= sortBy === 'date-desc' ? 'selected' : '' %>>Date (Descending)</option>
                      </select>
                    </div>

                    <div class="sorting-controls">
                      <select id="filterBy" aria-label="Filter items" onchange="applyFilter()">
                        <option value="" <%= filterBy === '' || filterBy === '' ? 'selected' : '' %>>Filter: Default</option>
                        <option value="for-approval" <%= filterBy === 'for-approval' ? 'selected' : '' %>>For Approval</option>
                        <option value="approved" <%= filterBy === 'approved' ? 'selected' : '' %>>Approved</option>
                      </select>
                    </div>
                </div>

                <!-- Transfer Orders Grid -->
            <div class="transfer-order-grid" id="transferOrderGrid">
                <% if (transferOrders && transferOrders.length > 0) { %>
                <% transferOrders.forEach(order => { %>
                  <div class="order-card" 
                    onclick="openEditTransferOrderModal(this)"
                    data-transfer-name="<%= order.transfername %>"
                    data-source-branch="<%= order.sourceBranch %>"
                    data-destination-branch="<%= order.destinationBranch %>"
                    data-status="<%= order.status %>"
                    data-date="<%= order.date %>"
                    data-items="<%= encodeURIComponent(JSON.stringify(order.items)) %>"
                    data-order-id="<%= order._id %>">
                  
                  <div class="card-header">
                     <span class="order-label"><%= order.transfername %></span>
                     <!-- Status dot with color -->
                     <span class="status-dot 
                                 <%= order.status === 'Approved' ? 'green'  
                                 : 'red' %>">
                     </span>
                  </div>
                 <p>Items in Order: <%= order.items.length %></p>
                 <p>Status: <%= order.status %></p>
                 <div class="card-menu">
                     <i class="fas fa-ellipsis-h"></i>
                 </div>
             </div>
                <% }) %>
                <% } else { %>
                <p>No transfer orders found.</p>
                <% } %>
            </div>

                            
  <!-- Create Transfer Order Modal -->
  <div id="createTransferOrderModal" class="modal" style="display: none;">
    <div class="modal-content">
      <span class="close-btn" onclick="closeTransferOrderModal()">&times;</span>
      <h2>Create Transfer Order</h2>
      <form id="transferOrderForm">
        <!-- Order Name -->
        <div class="form-group">
          <label for="orderName">Order Name</label>
          <input 
            type="text" 
            id="orderName" 
            name="orderName" 
            placeholder="Enter order name" 
            required 
          />
        </div>

        <!-- Source Branch (No longer a dropdown) -->
        <div class="form-group">
          <label for="sourceBranch">Source Branch</label>
          <input 
            type="text" 
            id="sourceBranch" 
            name="sourceBranch" 
            value="<%= selectedBranch %>" 
            readonly 
            required
          />
        </div>

        <!-- Destination Branch -->
        <div class="form-group">
          <label for="destinationBranch">Destination Branch</label>
          <select id="destinationBranch" name="destinationBranch" required>
            <option value="" disabled selected>Select</option> <!-- Placeholder option -->
            <% branches.forEach(branch => { %>
              <% if (branch.name !== selectedBranch) { %> <!-- Exclude the current branch -->
                <option value="<%= branch.name %>"><%= branch.name %></option>
              <% } %>
            <% }) %>
          </select>
        </div>

        <!-- Items to Transfer -->
        <div class="form-group">
          <label for="items">Items to Transfer</label>
          <div id="itemsContainer">
            <div class="item-entry">
              <select name="itemName[]" required>
                <% inventory.forEach(item => { %>
                  <option value="<%= item.name %>"><%= item.name %> (<%= item.quantity %> in stock)</option>
                <% }) %>
              </select>
              <input type="number" name="quantity[]" placeholder="Quantity" required>
            </div>
          </div>
          <button type="button" onclick="addItemEntry()">Add Another Item</button>
        </div>
        
        <!-- Submit Button -->
        <button type="submit">Create Transfer Order</button>
      </form>
    </div>
  </div>

  <!-- Order Details Modal -->
  <div id="orderDetailsModal" class="modal" style="display: none;">
    <div class="modal-content">
      <span class="close-btn" onclick="closeOrderDetailsModal()">&times;</span>
      <h2>Order Details</h2>
      
      <!-- Order Information -->
      <div class="order-info">
        <p><strong>Order Name:</strong> <span id="modalOrderName"></span></p>
        <p><strong>Source Branch:</strong> <span id="modalSourceBranch"></span></p>
        <p><strong>Destination Branch:</strong> <span id="modalDestinationBranch"></span></p>
        <p><strong>Status:</strong> <span id="modalStatus"></span></p>
        <p><strong>Date:</strong> <span id="modalDate"></span></p>
      
        
        <!-- Items List -->
        <h3>Items in Order</h3>
        <ul id="modalItemsList">
          <% inventory.forEach(item => { %>
            <li><%= item.name %> - Quantity: <%= item.quantity %></li>
          <% }) %>
        </ul>
      </div>
      
      <!-- Action Buttons -->
      <div class="modal-buttons">
        <button id="editOrderButton" type="button" onclick="enableEditMode()">Edit</button>
        <button type="button" onclick="deleteOrder()">Delete</button>
        <button id="approveButton" type="button" onclick="approveOrder()">Approve</button> <!-- Added id -->
        <button id="saveChangesButton" type="button" onclick="saveChanges()" disabled>Save Changes</button>
      </div>
    </div>
  </div>

</body>

<script>

let isEditMode = false;

    function openTransferOrderModal() {
  document.getElementById('createTransferOrderModal').style.display = 'flex';
}

function closeTransferOrderModal() {
  document.getElementById('createTransferOrderModal').style.display = 'none';
}



function addItemEntry() {
  const itemContainer = document.getElementById('itemsContainer');
  const itemEntry = document.createElement('div');
  itemEntry.classList.add('item-entry');
  itemEntry.innerHTML = `
    <select name="itemName[]" required>
      <% inventory.forEach(item => { %>
        <option value="<%= item.name %>"><%= item.name %> (<%= item.quantity %> in stock)</option>
      <% }) %>
    </select>
    <input type="number" name="quantity[]" placeholder="Quantity" required>
    <button type="button" class="remove-item" onclick="removeItemEntry(this)">X</button>
  `;
  itemContainer.appendChild(itemEntry);
}

// Function to remove an item entry
function removeItemEntry(button) {
  button.parentElement.remove();
}

document.getElementById('transferOrderForm').addEventListener('submit', async (e) => {
  e.preventDefault();
  
  const formData = new FormData(e.target);
  const data = {
    transfername: formData.get('orderName'),
    sourceBranch: formData.get('sourceBranch'),
    destinationBranch: formData.get('destinationBranch'),
    items: formData.getAll('itemName[]').map((name, index) => ({
      itemName: name,
      quantity: formData.getAll('quantity[]')[index]
    }))
  };

  try {
    const response = await fetch('/create-transfer-order', {
      method: 'POST',
      headers: { 'Content-Type': 'application/json' },
      body: JSON.stringify(data)
    });

    if (response.ok) {
      alert('Transfer order created successfully!');
      closeTransferOrderModal();
      location.reload()
    } else {
      const errorData = await response.json();
      console.error('Error:', response.status, errorData);

      if (errorData.errors && errorData.errors.length > 0) {
        alert('Error: ' + errorData.errors.join(', ')); 
      } else {
        alert('Error creating transfer order');
      }
    }
  } catch (error) {
    console.error(error);
    alert('Error creating transfer order');
  }
});

function openEditTransferOrderModal(orderCard) {
  currentOrderName = orderCard.getAttribute('data-transfer-name');
  currentOrderId = orderCard.getAttribute('data-order-id');
  currentOrderStatus = orderCard.getAttribute('data-status');

  isEditMode = false;  // Reset edit mode on opening the modal
  document.getElementById('saveChangesButton').disabled = true; // Disable Save button by default
  
  document.getElementById('modalOrderName').textContent = orderCard.getAttribute('data-transfer-name');
  document.getElementById('modalSourceBranch').textContent = orderCard.getAttribute('data-source-branch');
  document.getElementById('modalDestinationBranch').textContent = orderCard.getAttribute('data-destination-branch');
  document.getElementById('modalStatus').textContent = orderCard.getAttribute('data-status');
  document.getElementById('modalDate').textContent = orderCard.getAttribute('data-date');
  
  // Populate items
  const itemsList = JSON.parse(decodeURIComponent(orderCard.getAttribute('data-items')));
  const modalItemsList = document.getElementById('modalItemsList');
  modalItemsList.innerHTML = '';
  itemsList.forEach(item => {
    const listItem = document.createElement('li');
    listItem.textContent = `${item.itemName} - Quantity: ${item.quantity}`;
    modalItemsList.appendChild(listItem);
  });

  const approveButton = document.getElementById('approveButton');
    if (currentOrderStatus === 'Approved') {
      approveButton.disabled = true;
    } else {
      approveButton.disabled = false;
    }

  // Display the modal
  document.getElementById('orderDetailsModal').style.display = 'flex';
}

function closeOrderDetailsModal() {
  document.getElementById('orderDetailsModal').style.display = 'none';
  isEditMode = false;
  document.getElementById('saveChangesButton').disabled = true;
}

// Implement further actions for edit, delete, approve, save changes
function editOrder() { /* Add edit functionality */ }
function deleteOrder() { /* Add delete functionality */ }
function approveOrder() { /* Add approve functionality */ }
function saveChanges() { /* Add save functionality */ }

// Combined window.onclick event listener
window.onclick = function(event) {
  const createTransferOrderModal = document.getElementById('createTransferOrderModal');
  const orderDetailsModal = document.getElementById('orderDetailsModal');

  // Close Transfer Order modal if clicking outside of it
  if (event.target === createTransferOrderModal) {
    closeTransferOrderModal();
  }
  
  // Close Order Details modal if clicking outside of it
  if (event.target === orderDetailsModal) {
    closeOrderDetailsModal();
  }
};

async function deleteOrder() {
    

    if (confirm('Are you sure you want to delete this order?')) {
        try {
            const response = await fetch(`/delete-transfer-order/${currentOrderName}`, {
                method: 'DELETE',
                headers: {
                    'Content-Type': 'application/json',
                },
            });

            if (response.ok) {
                alert('Transfer order deleted successfully.');
                closeOrderDetailsModal();
                location.reload(); // Refresh to update the list
            } else {
                const errorData = await response.json();
                alert('Error: ' + errorData.message);
            }
        } catch (error) {
            console.error(error);
            alert('An error occurred while deleting the transfer order.');
        }
    }
}


function enableEditMode() {
  isEditMode = true;
  document.getElementById('saveChangesButton').disabled = false;

  // Make the fields editable by switching them from <span> to <input> elements
  const orderName = document.getElementById('modalOrderName');
  const destinationBranch = document.getElementById('modalDestinationBranch');

  // Convert text elements to inputs
  orderName.innerHTML = `<input type="text" value="${orderName.textContent}" id="editOrderName" />`;
  destinationBranch.innerHTML = `
    <select id="editDestinationBranch">
      <option value="" disabled>Select</option>
      <% branches.forEach(branch => { %>
        <% if (branch.name !== selectedBranch) { %>
          <option value="<%= branch.name %>"><%= branch.name %></option>
        <% } %>
      <% }) %>
    </select>
  `;

  // Set items as editable
  document.querySelectorAll('#modalItemsList li').forEach((li, index) => {
    const quantity = li.textContent.split(' - Quantity: ')[1];
    li.innerHTML = `${li.textContent.split(' - Quantity: ')[0]} - Quantity: <input type="number" value="${quantity}" id="editItemQuantity${index}" />`;
  });
}

// Save changes function to handle submission of edited data
async function saveChanges() {
  if (!isEditMode) return;

  // Gather data from edited inputs
  const updatedData = {
    transfername: document.getElementById('editOrderName').value,
    destinationBranch: document.getElementById('editDestinationBranch').value,
    items: Array.from(document.querySelectorAll('#modalItemsList li')).map((li, index) => ({
      itemName: li.textContent.split(' - Quantity: ')[0],
      quantity: document.getElementById(`editItemQuantity${index}`).value
    }))
  };


  // Send updated data to the server
  try {
    const response = await fetch(`/update-transfer-order/${currentOrderId}`, {
      method: 'PUT',
      headers: { 'Content-Type': 'application/json' },
      body: JSON.stringify(updatedData)
    });

    if (response.ok) {
      alert('Changes saved successfully!');
      closeOrderDetailsModal();
      location.reload();
    } else {
      const errorData = await response.json();
      alert('Error: ' + errorData.message);
    }
  } catch (error) {
    console.error('Save error:', error);
    alert('An error occurred while saving changes.');
  }

  // Disable edit mode after saving changes
  isEditMode = false;
  document.getElementById('saveChangesButton').disabled = true;
}

async function approveOrder() {
  if (confirm('Are you sure you want to approve this transfer order?')) {
    try {
      const response = await fetch(`/approve-transfer-order/${currentOrderId}`, {
        method: 'POST',
        headers: { 'Content-Type': 'application/json' },
      });

      if (response.ok) {
        alert('Order approved successfully.');
        closeOrderDetailsModal();
        location.reload(); // Refresh to show updated inventory
      } else {
        const errorData = await response.json();
        alert('Error: ' + errorData.message);
      }
    } catch (error) {
      console.error('Error approving order:', error);
      alert('An error occurred while approving the order.');
    }
  }
}

        const searchInput = document.querySelector('.search-bar input'); 
        const searchIcon = document.querySelector('.search-icon'); 
        const searchEnter = document.querySelector('.search-bar');

        searchEnter.addEventListener('keydown', (event) => {
          const searchTerm = searchInput.value.trim();

          if (event.key === 'Enter') {
            window.location.href = `/transferorder?search=${encodeURIComponent(searchTerm)}`;
          }
        });

        searchIcon.addEventListener('click', () => {
            const searchTerm = searchInput.value.trim();

            if (searchTerm) {
              // Redirect to the inventory route with the search term as a query parameter
              window.location.href = `/transferorder?search=${encodeURIComponent(searchTerm)}`;
            }
        });

    function applySorting() {
    const sortBy = document.getElementById('sortBy').value;
    const searchParams = new URLSearchParams(window.location.search);
    searchParams.set('sortBy', sortBy); // Set the sorting option in the query
    window.location.search = searchParams.toString(); // Reload the page with the updated query
    }

    function applyFilter() {
    const filterBy = document.getElementById('filterBy').value;
    const searchParams = new URLSearchParams(window.location.search);
    searchParams.set('filterBy', filterBy); // Set the filter option in the query
    window.location.search = searchParams.toString(); // Reload the page with the updated query
    }
  
</script>