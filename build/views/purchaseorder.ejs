<!DOCTYPE html>
<html lang="en">

<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Purchase Orders</title>
    <link rel="stylesheet" href="/assets/purchaseorder-style.css">
    <link rel="stylesheet" href="/assets/sidebar.css">
    <link rel="stylesheet" href="/assets/topbar.css">
    <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.0.0-beta3/css/all.min.css" async>
    <link rel="preconnect" href="https://fonts.googleapis.com">
    <link rel="preconnect" href="https://fonts.gstatic.com" crossorigin="anonymous">
    <link href="https://fonts.googleapis.com/css2?family=Dancing+Script:wght@400;700&display=swap" rel="stylesheet" async>
</head>

<body>
    <%- include('partials/topbar', {username: username, role: role} )%>

    <div class="main-fb">
        <%- include('partials/sidebar') %>

        <div class="main-content">
            <h1>Purchase Order</h1>
            <!-- Order Status Section -->
            <section class="order-status">
                <div class="status for-approval">
                    <i class="fas fa-exclamation-circle"></i>
                    <div class="status-text">
                        <span class="status-label">For Approval</span>
                        <h2>5</h2>
                    </div>
                </div>
                <div class="status pending">
                    <i class="fas fa-exclamation-triangle"></i>
                    <div class="status-text">
                        <span class="status-label">Pending</span>
                        <h2>55</h2>
                    </div>
                </div>
                <div class="status completed">
                    <i class="fas fa-check-circle"></i>
                    <div class="status-text">
                        <span class="status-label">Completed (This month)</span>
                        <h2>555</h2>
                    </div>
                </div>
            </section>

            <!-- Purchase Orders Table Section -->
            <section class="inventory-table">
                <div class="purchase-order-controls">

                    <button class="create-purchase-order" onclick="openPurchaseOrderModal()">
                        <i class="fas fa-plus"></i> Create Purchase Order
                        
                    </button>
                    

                    <div class="search-bar">
                        <input type="text" placeholder="Search Purchase Orders..." aria-label="Search orders">
                        <i class="fas fa-search search-icon"></i>
                    </div>

                    <div class="sorting-controls">
                        <button class="filter"> Filter by</button>
                        <button class="pagination-btn prev"></button>
                        <button class="pagination-btn next"></button>
                    </div>
                </div>

                <!-- Order Grid -->
                <div class="order-grid" id="orderGrid">
                    <% purchaseorder.forEach(order => { %> 
                        <div class="item-card" data-id="<%= order._id %>" style="cursor: pointer;" onclick="openDisplayPurchaseOrderModal('<%= order._id %>')">
                            <div class="card-header">
                                <span class="item-name">Order Number: <%= String(order.orderNumber).padStart(5, '0') %></span>
                                <span class="item-dot"></span>
                            </div>
                            <p><strong>Supplier:</strong> <%= order.supplier %></p>
                            <p><strong>Created at:</strong> <%= order.createdAt.toDateString() %></p>
                            <p><strong>Status:</strong> <%= order.status %></p> 
                            <div class="items-list">
                                <% if (order.items && order.items.length > 0) { %> 
                                    <% order.items.forEach(item => { %> 
                                        <div class="item-details">
                                            <p><strong>Item Name:</strong> <%= item.itemName %></p>                           
                                            <p><strong>Quantity:</strong> <%= item.quantity %></p>
                                            <p><strong>Cost:</strong> P<%= item.cost %></p>
                                            <p><strong>Amount:</strong> P<%= item.amount %></p>
                                        </div>
                                    <% }) %>
                                <% } else { %>
                                    <p>No items found for this order.</p> 
                                <% } %>
                            </div>
                            <p><strong>Delivery Cost:</strong> <%= order.deliveryCost %></p>
                            <p><strong>Total Cost:</strong> <%= order.totalCost %></p>
                            <div class="card-menu">
                                <i class="fas fa-ellipsis-h"></i>
                            </div>
                        </div>
                    <% }) %>
                </div>

                <div id="addPurchaseOrderModal" class="modal">
                    <div class="modal-content">
                      <span class="close" onclick="closePurchaseOrderModal()">&times;</span>
                      <h2>Create Purchase Order</h2>
                      <form id="addPurchaseOrderForm" action="/add-purchase-order" method="POST">

                        <label for="supplier">Supplier:</label>
                        <select name="supplier" id="supplier" required>
                          <option value="">Select a supplier</option>
                          <% suppliers.forEach(supplier => { %>
                            <option value="<%= supplier.name %>"><%= supplier.name %></option>
                          <% }) %>
                        </select>

                        <label for="orderNumber">Order Number:</label>
                        <input type="number" name="orderNumber" id="orderNumber" value="<%= nextOrderNumber %>" readonly required>
                  
                        <label for="orderStatus">Order Status:</label>
                        <input type="text" name="status" id="orderStatus" value="For Approval" readonly required>

                        <label for="expectedOn">Expected Arrival Date:</label>
                        <input type="date" id="expectedOn" name="expectedOn" required>

                        <label for="branchStored">Branch to be Stored at:</label>
                        <select name="branchStored" id="branchStored" required>
                          <option value="">Select a branch</option>
                          <% branches.forEach(branch => { %>
                            <option value="<%= branch.name %>"><%= branch.name %></option>
                          <% }) %>
                        </select>
                  
                        <table id="itemsTable">

                          <thead>
                            <tr>
                              <th>Item Name</th>
                              <th>Quantity</th>
                              <th>Cost</th>
                              <th>Amount</th>
                            </tr>
                          </thead>
                          <tbody id="itemsBody">
                            <tr>
                              <td>
                                <select name="items[0][itemName]" onchange="updateCost(this)">
                                  <option value="">Select an item</option>
                                  <% items.forEach(item => { %>
                                    <option value="<%= item.name %>" data-price="<%= item.price %>"><%= item.name %></option>
                                  <% }) %>
                                </select>
                              </td>
                              <td><input type="number" name="items[0][quantity]" min="1" onchange="updateCost(this)"></td>
                              <td><input type="number" name="items[0][cost]" readonly></td>
                              <td><input type="number" name="items[0][amount]" readonly></td>
                              <td><button type="button" onclick="removeItemRow(this)">Remove</button></td>
                            </tr>
                          </tbody>
                        </table>

                        <label for="deliveryCost">Delivery Cost:</label>
                        <input type="number" name="deliveryCost" id="deliveryCost" onchange="updateDeliveryCost()">
                        
                        <label for="totalCost">Total Cost:</label>
                        <input type="number" name="totalCost" id="totalCost" readonly required>
                        
                        <button type="button" onclick="addItemRow()">Add Item</button>
                        <button type="submit">Submit</button>
                      </form>
                    </div>
                  </div>
                  

                  <div id="displayPurchaseOrderModal" class="modal" style="display: none;">
                    <div class="modal-display">
                        <span class="close" onclick="closeDisplayPurchaseOrderModal()">&times;</span>
                        <h2>Purchase Order Details</h2>
                
                        <form id="editPurchaseOrderForm" onsubmit="applyChanges(event)">

                            <input type="hidden" id="orderID" name="orderID">
                
                            <label for="displayOrderNumber">Order Number:</label>
                            <input type="number" id="displayOrderNumber" name="orderNumber" readonly>
                
                            <label for="displaySupplier">Supplier:</label>
                            <input type="text" id="displaySupplier" name="supplier" readonly>
                
                            <label for="displayCreatedAt">Created At:</label>
                            <input type="date" id="displayCreatedAt" name="createdAt" readonly>
                
                            <label for="displayExpectedOn">Expected On:</label>
                            <input type="date" id="displayExpectedOn" name="expectedOn">
                
                            <label for="displayStatus">Status:</label>
                            <input type="text" id="displayStatus" name="status" readonly>
                
                            <label for="displayDeliveryCost">Delivery Cost:</label>
                            <input type="text" id="displayDeliveryCost" name="deliveryCost">
                
                            <h3>Items</h3>
                            <ul id="displayItemsList"></ul>
                
                            <button type="button" onclick="approve()">Approve</button>
                            <button type="button" onclick="enableEditing()">Edit</button>
                            <button type="submit">Apply Changes</button>
                
                            <label for="displayTotalCost">Total Cost:</label>
                            <input type="number" id="displayTotalCost" name="totalCost" readonly>
                        </form>   
                    </div>
                </div>
                
    
    

    <script>

        const addPurchaseOrderModal = document.getElementById('addPurchaseOrderModal');
        const displayPurchaseOrderModal = document.getElementById('displayPurchaseOrderModal');

        function openPurchaseOrderModal() {
            addPurchaseOrderModal.style.display = 'block';
        }

        function closePurchaseOrderModal() {
            addPurchaseOrderModal.style.display = 'none';
        }

        function closeDisplayPurchaseOrderModal() {
            displayPurchaseOrderModal.style.display = 'none';
        }

        window.onclick = function(event) {
            if (event.target == addPurchaseOrderModal) {
                closePurchaseOrderModal();
            } else if(event.target == displayPurchaseOrderModal){
                closeDisplayPurchaseOrderModal();
            }
        }

        function calculateTotalCost() {
            const itemsBody = document.getElementById('itemsBody');
            const rows = itemsBody.querySelectorAll('tr');
            let totalCost = 0;

            rows.forEach(row => {
                const amountInput = row.querySelector('input[name*="amount"]');
                const amount = parseFloat(amountInput.value) || 0;
                totalCost += amount;
            });

            const deliveryCostInput = document.getElementById('deliveryCost');
            const deliveryCost = parseFloat(deliveryCostInput.value) || 0;

            const totalCostInput = document.getElementById('totalCost');
            totalCostInput.value = (totalCost + deliveryCost).toFixed(2);
        }

        function updateDeliveryCost() {
            calculateTotalCost();
        }

        function updateCost(element) {
            const row = element.closest('tr');
            const selectElement = row.querySelector('select[name*="itemName"]'); 
            const quantityInput = row.querySelector('input[name*="quantity"]');
            const costInput = row.querySelector('input[name*="cost"]');
            const amountInput = row.querySelector('input[name*="amount"]');
            const branchInput = row.querySelector('input[name*="branchStored"]');
    
            const price = parseFloat(selectElement.options[selectElement.selectedIndex].dataset.price) || 0;;
            const quantity = parseFloat(quantityInput.value) || 0;
            const branchStored = selectElement.options[selectElement.selectedIndex].dataset.branch;

            costInput.value = price.toFixed(2);
            amountInput.value = (price * quantity).toFixed(2);
            branchInput.value = branchStored; 

            calculateTotalCost();
        }

        function addItemRow() {
            const itemsBody = document.getElementById('itemsBody');
            const newRow = document.createElement('tr');

            const rowCount = itemsBody.querySelectorAll('tr').length;
            newRow.innerHTML = `
        <td>
            <select name="items[${rowCount}][itemName]" onchange="updateCost(this)">
                <option value="">Select an item</option>
                <% items.forEach(item => { %>
                    <option value="<%= item.name %>" data-price="<%= item.price %>" data-branch="<%= item.branchStored %>"><%= item.name %></option>
                <% }) %>
            </select>
        </td>
        <td><input type="number" name="items[${rowCount}][quantity]" min="1" onchange="updateCost(this)"></td>
        <td><input type="number" name="items[${rowCount}][cost]" readonly></td>
        <td><input type="number" name="items[${rowCount}][amount]" readonly></td>
        <td>
            <input type="hidden" name="items[${rowCount}][branchStored]" value="">
            <button type="button" onclick="removeItemRow(this)">Remove</button>
        </td>
    `;

            itemsBody.appendChild(newRow);
            calculateTotalCost();
        }

        function validateItemRow(row) {
        const selectElement = row.querySelector('select[name*="itemName"]');
        const quantityInput = row.querySelector('input[name*="quantity"]');
        const costInput = row.querySelector('input[name*="cost"]');
        const amountInput = row.querySelector('input[name*="amount"]');

        const itemNameValid = selectElement.value !== '';
        const quantityValid = parseInt(quantityInput.value) > 0;
        const costValid = parseFloat(costInput.value) >= 0;
        const amountValid = parseFloat(amountInput.value) >= 0;

        row.classList.toggle('invalid', !(itemNameValid && quantityValid && costValid && amountValid));

        return itemNameValid && quantityValid && costValid && amountValid;
    }

        function validateForm() {
            const itemsBody = document.getElementById('itemsBody');
            const rows = itemsBody.querySelectorAll('tr');
            let allValid = true;

            rows.forEach(row => {
                if (!validateItemRow(row)) {
                    allValid = false;
                }
            });

            if (!allValid) {
                alert("Please correct the highlighted errors before submitting the form.");
            }

            return allValid;
        }
        function removeItemRow(button) {
        const itemsBody = document.getElementById('itemsBody');
        const rows = itemsBody.querySelectorAll('tr');
        
        if (rows.length > 1) {
            const row = button.closest('tr');
            row.remove();
            calculateTotalCost();
        }
    }

        function enableEditing() {
        document.getElementById('displaySupplier').readOnly = false;
        document.getElementById('displayExpectedOn').readOnly = false;
        document.getElementById('displayDeliveryCost').readOnly = false;

        document.querySelectorAll('#displayItemsList input').forEach(input => {
            input.readOnly = false;
        });
        }

        async function applyChanges(event) {
            event.preventDefault(); 

            const orderId = document.getElementById('orderID').value;

            const formData = {
                supplier: document.getElementById('displaySupplier').value,
                expectedOn: document.getElementById('displayExpectedOn').value,
                deliveryCost: parseFloat(document.getElementById('displayDeliveryCost').value),
                items: [] 
            };

            const itemsList = document.getElementById('displayItemsList').children;
            for (let item of itemsList) {

                const itemNameElement = item.querySelector('.item-name');
                const itemQuantityElement = item.querySelector('.item-quantity');
                const itemCostElement = item.querySelector('.item-cost');
                const itemReceivedElement = item.querySelector('.item-received');

                if (!itemNameElement || !itemQuantityElement || !itemCostElement) {
                    console.error('One or more elements are missing in the item:', item);
                    continue; 
                }

                const itemData = {
                    id: item.getAttribute('data-id'),
                    name: itemNameElement.textContent, 
                    quantity: parseInt(itemQuantityElement.value) || 0, 
                    cost: parseFloat(itemCostElement.value) || 0, 
                    received: itemReceivedElement ? itemReceivedElement.checked : false 
                };
                itemData.amount = itemData.cost * itemData.quantity; 
                formData.items.push(itemData); 
            }

            try {
                const response = await fetch(`/purchaseorder/${orderId}`, {
                    method: 'PUT',
                    headers: {
                        'Content-Type': 'application/json',
                    },
                    body: JSON.stringify(formData),
                });

                if (!response.ok) {
                    throw new Error(`Error applying changes: ${response.statusText}`);
                }

                const updatedOrder = await response.json();
                console.log('Updated purchase order:', updatedOrder);
            } catch (error) {
                console.error('Error applying changes:', error);
            }
        }


        function openDisplayPurchaseOrderModal(orderId) {
            currentOrder = orderId;

            fetch(`/purchaseorder/${orderId}`)
                .then(response => response.json())
                .then(order => {

                    document.getElementById('displayOrderNumber').value = String(order.orderNumber).padStart(5, '0');
                    document.getElementById('displaySupplier').value = order.supplier;
                    document.getElementById('displayCreatedAt').value = new Date(order.createdAt).toISOString().split('T')[0];
                    document.getElementById('displayExpectedOn').value = order.expectedOn ? new Date(order.expectedOn).toISOString().split('T')[0] : 'Not set';
                    document.getElementById('displayDeliveryCost').value = order.deliveryCost ? `P${order.deliveryCost}` : 'Not set';
                    document.getElementById('displayStatus').value = order.status;
                    document.getElementById('displayTotalCost').value = `P${order.totalCost.toFixed(2)}`;

                    const itemsList = document.getElementById('displayItemsList');
                    itemsList.innerHTML = '';
                    order.items.forEach((item, index) => {
                        const li = document.createElement('li');

                        const receivedButton = document.createElement('button');
                        receivedButton.type = 'button';
                        receivedButton.textContent = item.received ? 'Received' : 'Mark as Received';
                        receivedButton.disabled = item.received;
                        receivedButton.className = item.received ? 'received-btn' : 'mark-received-btn';

                        if (!item.received) {
                            receivedButton.addEventListener('click', (event) => {
                            event.preventDefault();
                            markItemAsReceived(orderId, item);
                            });
                        }

                        li.innerHTML = `
                            <span>
                                <input type="text" name="items[${index}][itemName]" value="${item.itemName}" readonly>
                            </span>
                            <span>
                                <input type="number" name="items[${index}][quantity]" value="${item.quantity}" min="1" readonly>
                            </span>
                            <span>
                                <input type="number" name="items[${index}][cost]" value="${item.cost}" readonly>
                            </span>
                            <span>
                                <input type="number" name="items[${index}][amount]" value="${item.amount}" readonly>
                            </span>
                            <span>
                                <input type="hidden" name="items[${index}][branchStored]" value="${item.branchStored}">
                            </span>
                        `;
                        li.appendChild(receivedButton);
                        itemsList.appendChild(li);
                    });

                    document.getElementById('displayPurchaseOrderModal').style.display = 'block';
                })
                .catch(err => console.error('Error fetching purchase order:', err));
        }


        function markItemAsReceived(orderId, item) {
            fetch(`/purchaseorder/${orderId}/items/${item._id}/receive`, {
                method: 'PUT'
            })
            .then(response => {
                if (!response.ok) throw new Error('Failed to mark item as received');
                return response.json();
            })
            .then(updatedOrder => {
                openDisplayPurchaseOrderModal(orderId);
            })
            .catch(err => console.error('Error updating item status:', err));
        }

        document.getElementById('addPurchaseOrderForm').onsubmit = function(event) {
        if (!validateForm()) {
            event.preventDefault(); 
        }
    };



    </script>
</body>

</html>
