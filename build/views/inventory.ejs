<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Inventory</title>
    <link rel="stylesheet" href="/assets/inventory-style.css">
    <link rel="stylesheet" href="/assets/sidebar.css">
    <link rel="stylesheet" href="/assets/topbar.css">
    <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.0.0-beta3/css/all.min.css">

    <!-- Font links (optimized preconnect) -->
    <link rel="preconnect" href="https://fonts.googleapis.com">
    <link rel="preconnect" href="https://fonts.gstatic.com" crossorigin>
    <link href="https://fonts.googleapis.com/css2?family=Dancing+Script:wght@400;700&display=swap" rel="stylesheet">
    <link href="https://fonts.googleapis.com/css2?family=IBM+Plex+Sans:wght@100;400;700&display=swap" rel="stylesheet">
</head>
<body>
    <%- include('partials/topbar') %>

    <div class="main-fb">
        <%- include('partials/sidebar') %>

        <div class="main-content">
          <h1>Inventory</h1>

            <!-- Inventory Status Section -->
            <section class="inventory-status">
                <div class="status out-of-stock">
                  <i class="fas fa-exclamation-circle" aria-hidden="true"></i>
                  <div class="status-text">
                    <span class="status-label">Out Of Stock</span>
                    <h2><%= outOfStockCount %></h2>
                  </div>
                </div>
                <div class="status low-stock">
                  <i class="fas fa-exclamation-triangle" aria-hidden="true"></i>
                  <div class="status-text">
                    <span class="status-label">Low Stock</span>
                    <h2><%= lowStockCount %></h2>
                  </div>
                </div>
                <div class="status in-stock">
                  <i class="fas fa-check-circle" aria-hidden="true"></i>
                  <div class="status-text">
                    <span class="status-label">In Stock</span>
                    <h2><%= sufficientStockCount %></h2>
                  </div>
                </div>
            </section>

            <!-- Inventory Table Section -->
            <section class="inventory-table">
                <div class="inventory-controls">
                    <!-- Add Item Button -->
                    <button class="add-item"><i class="fas fa-plus"></i> Add Item</button>
                    <button class="stock-in">Stock In</button>
                    <button class="stock-out">Stock Out</button>
                    
                    <!-- Search Bar -->
                    <div class="search-bar">
                        <input type="text" placeholder="Search items..." aria-label="Search inventory">
                        <i class="fas fa-search search-icon"></i>
                    </div>

                    <!-- Sorting and Filtering Controls -->
                    <div class="sorting-controls">
                        <button class="sort" aria-label="Sort items"><i class="fas fa-sort"></i> Sort by</button>
                        <button class="filter" aria-label="Filter items"><i class="fas fa-filter"></i> Filter by</button>
                        <button class="pagination-btn prev" aria-label="Previous page"><i class="fas fa-chevron-left"></i></button>
                        <button class="pagination-btn next" aria-label="Next page"><i class="fas fa-chevron-right"></i></button>
                    </div>

                    <!-- Add Item Modal -->
                    <div id="addItemModal" class="modal">
                        <div class="modal-content">
                          <span class="close" aria-label="Close modal">&times;</span>
                          <h2>Add New Item</h2>
                          <form id="addItemForm" action="/add-item" method="POST">
                            <label for="name">Item Name</label>
                            <input type="text" id="name" name="name" required>
                            
                            <label for="category">Category</label>
                            <input type="text" id="category" name="category" required>
                            
                            <label for="price">Price</label>
                            <input type="number" id="price" name="price" min="0" step="0.01" required>
                            
                            <label for="quantityInStock">Quantity In Stock</label>
                            <input type="number" id="quantity" name="quantity" min="0" required>
                            
                            <label for="lowStockThreshold">Low Stock Threshold</label>
                            <input type="number" id="lowStockThreshold" name="lowStockThreshold" min="0" required>
                            
                            <label for="measurementUnit">Measurement Unit</label>
                            <input type="text" id="measurementUnit" name="measurementUnit" required>

                            <input type="hidden" id="selectedBranch" name="branchStored" value="<%= selectedBranch %>">
                            
                            <button type="submit">Add Item</button>
                          </form>
                        </div>
                    </div>
                </div>

                <!-- Inventory Grid -->
                <div class="inventory-grid" id="inventoryGrid">
                    <% if (inventory && inventory.length > 0) { %>
                      <% inventory.forEach(item => { %>
                        <div class="item-card <%= item.branchStored %>" 
                             data-name="<%= item.name %>" 
                             data-category="<%= item.category %>"
                             data-price="<%= item.price %>"
                             data-quantity="<%= item.quantity %>"
                             data-lowstockthreshold="<%= item.lowStockThreshold %>"
                             data-measurementunit="<%= item.measurementUnit %>"
                             data-branch="<%= item.branchStored %>">
                          <div class="card-header">
                            <span class="item-label"><%= item.category %></span>
                            
                            <!-- Correct background color handling -->
                            <span class="item-dot 
                                <%= item.quantity === 0 ? 'red' 
                                : item.quantity <= item.lowStockThreshold ? 'orange' 
                                : 'green' %>">
                            </span>
                          </div>
                          <span class="item-name"><%= item.name %></span>
                          <p>Price: â‚±<%= item.price.toFixed(2) %></p>
                          <p>In Stock: <%= item.quantity %> <%= item.measurementUnit %></p>
                          <div class="card-menu">
                            <i class="fas fa-ellipsis-h"></i>
                          </div>
                        </div>
                      <% }) %>
                    <% } else { %>
                      <p>No items in inventory.</p>
                    <% } %>
                  </div>
              </div>
            </section>

            <!-- Item On Click Modal -->
            <div id="viewItemModal" class="modal">
                <div class="modal-content">
                    <span class="close">&times;</span>
                    <h2>Item Details</h2>
                    
                    <form id="viewItemForm">
                        <label for="name">Item Name</label>
                        <input type="text" id="viewName" name="name" readonly>
                        
                        <label for="category">Category</label>
                        <input type="text" id="viewCategory" name="category" readonly>
                        
                        <label for="price">Price</label>
                        <input type="number" id="viewPrice" name="price" readonly>
                        
                        <label for="quantityInStock">Quantity In Stock</label>
                        <input type="number" id="viewQuantity" name="quantity" readonly>
                        
                        <label for="lowStockThreshold">Low Stock Threshold</label>
                        <input type="number" id="viewLowStockThreshold" name="lowStockThreshold" readonly>
                        
                        <label for="measurementUnit">Measurement Unit</label>
                        <input type="text" id="viewMeasurementUnit" name="measurementUnit" readonly>
                        
                        <input type="hidden" id="viewSelectedBranch" name="branchStored">
                        
                        <div class="button-group">
                            <button type="button" id="editItemBtn">Edit</button>
                            <button type="button" id="deleteItemBtn">Delete</button>
                            <button type ="button" id="applyBtn">Apply</button>
                        </div>
                    </form>
                </div>
              </div>
        </div>
    </div>

<script>
    // ADD Modal functionality
    const modal = document.getElementById("addItemModal");
    const btn = document.querySelector(".add-item");
    const span = document.getElementsByClassName("close")[0];

    // Open the modal when the "Add Item" button is clicked
    btn.onclick = function() {
        modal.style.display = "block";
    }

    // Close the modal when the "x" span is clicked
    span.onclick = function() {
        modal.style.display = "none";
    }

    // Close the modal when clicking outside of it
    window.onclick = function(event) {
        if (event.target == modal) {
            modal.style.display = "none";
        }
    }

    document.addEventListener('DOMContentLoaded', () => {
    const itemCards = document.querySelectorAll('.item-card');  // Select all item cards
    const modal = document.getElementById('viewItemModal');      // Modal element
    const closeModal = modal.querySelector('.close');            // Close button

       // Button elements
    const editItemBtn = document.getElementById('editItemBtn');
    const applyBtn = document.getElementById('applyBtn');
    applyBtn.disabled = true;
    const deleteItemBtn = document.getElementById('deleteItemBtn');

    // Modal input fields
    const viewName = document.getElementById('viewName');
    const viewCategory = document.getElementById('viewCategory');
    const viewPrice = document.getElementById('viewPrice');
    const viewQuantity = document.getElementById('viewQuantity');
    const viewLowStockThreshold = document.getElementById('viewLowStockThreshold');
    const viewMeasurementUnit = document.getElementById('viewMeasurementUnit');
    const viewSelectedBranch = document.getElementById('viewSelectedBranch');

    // Add event listeners to each item card
    itemCards.forEach(card => {
      card.addEventListener('click', () => {
        // Set the modal fields with the clicked item's data
        viewName.value = card.getAttribute('data-name');
        viewCategory.value = card.getAttribute('data-category');
        viewPrice.value = card.getAttribute('data-price');
        viewQuantity.value = card.getAttribute('data-quantity');
        viewLowStockThreshold.value = card.getAttribute('data-lowstockthreshold');
        viewMeasurementUnit.value = card.getAttribute('data-measurementunit');
        viewSelectedBranch.value = card.getAttribute('data-branch');

        disableFields();

        // Display the modal
        modal.style.display = 'block';
      });
    });

    // Close the modal when the close button is clicked
    closeModal.addEventListener('click', () => {
      modal.style.display = 'none';
    });

    // Close the modal when clicking outside the modal content
    window.addEventListener('click', (event) => {
      if (event.target === modal) {
        modal.style.display = 'none';
      }
    });

    editItemBtn.addEventListener('click', () => {
      enableFields();
      applyBtn.disabled = false;  // Enable "Apply" button
    });

    // Handle the "Apply" button click to send updated data to the server
    applyBtn.addEventListener('click', async () => {
      const updatedItem = {
        name: viewName.value,
        category: viewCategory.value,
        price: parseFloat(viewPrice.value),
        quantity: parseInt(viewQuantity.value),
        lowStockThreshold: parseInt(viewLowStockThreshold.value),
        measurementUnit: viewMeasurementUnit.value,
        branchStored: viewSelectedBranch.value
      };

      try {
        const response = await fetch('/update-item', {
          method: 'POST',
          headers: {
            'Content-Type': 'application/json'
          },
          body: JSON.stringify(updatedItem)
        });

        if (response.ok) {
          alert('Item updated successfully!');
          modal.style.display = 'none';
          location.reload(); // Reload the page to reflect changes
        } else {
          alert('Failed to update the item.');
        }
      } catch (error) {
        console.error('Error updating item:', error);
        alert('An error occurred while updating the item.');
      }
    });

    // Function to disable input fields
    function disableFields() {
      viewName.readOnly = true;
      viewCategory.readOnly = true;
      viewPrice.readOnly = true;
      viewQuantity.readOnly = true;
      viewLowStockThreshold.readOnly = true;
      viewMeasurementUnit.readOnly = true;
    }

    // Function to enable input fields
    function enableFields() {
      viewName.readOnly = false;
      viewCategory.readOnly = false;
      viewPrice.readOnly = false;
      viewQuantity.readOnly = false;
      viewLowStockThreshold.readOnly = false;
      viewMeasurementUnit.readOnly = false;
    }

    deleteItemBtn.addEventListener('click', async () => {
    const name = document.getElementById('viewName').value;
    const branchStored = document.getElementById('viewSelectedBranch').value;

    const confirmDelete = confirm(`Are you sure you want to delete the item: ${name}?`);
    if (!confirmDelete) return;

    try {
      const response = await fetch('/delete-item', {
        method: 'DELETE',
        headers: {
          'Content-Type': 'application/json',
        },
        body: JSON.stringify({ name, branchStored }),  // Pass the item name and branch in the request body
      });

      const data = await response.json();
      if (response.ok) {
        alert('Item deleted successfully');
        window.location.reload();  // Reload the page or update the inventory UI
      } else {
        alert('Failed to delete the item: ' + data.message);
      }
    } catch (error) {
      console.error('Error deleting item:', error);
      alert('An error occurred while trying to delete the item.');
    }
  });

  const searchInput = document.getElementById('searchInput');


  searchInput.addEventListener('keyup', async () => {
    const searchTerm = searchInput.value;

    try {
        const response = await fetch(`/search-item?q=${encodeURIComponent(searchTerm)}`);
        const items = await response.json();

        // Update the UI to display the search results
        const inventoryGrid = document.getElementById('inventoryGrid');
        inventoryGrid.innerHTML = '';  // Clear existing items

        if (items.length > 0) {
            items.forEach(item => {
                const itemCard = document.createElement('div');
                itemCard.classList.add('item-card', item.branchStored);
                itemCard.innerHTML = `
                    <div class="card-header">
                        <span class="item-label">${item.category}</span>
                        <span class="item-dot ${item.quantity === 0 ? 'red' : item.quantity <= item.lowStockThreshold ? 'orange' : 'green'}"></span>
                    </div>
                    <span class="item-name">${item.name}</span>
                    <p>Price: â‚±${item.price.toFixed(2)}</p>
                    <p>In Stock: ${item.quantity} ${item.measurementUnit}</p>
                    <div class="card-menu">
                        <i class="fas fa-ellipsis-h"></i>
                    </div>
                `;
                inventoryGrid.appendChild(itemCard);  // Add the new item cards to the grid
            });
        } else {
            inventoryGrid.innerHTML = '<p>No items found.</p>';
        }
    } catch (error) {
        console.error('Error fetching search results:', error);
    }
});
});
</script>
</body>
</html>
