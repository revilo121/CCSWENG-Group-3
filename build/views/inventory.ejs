<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Inventory</title>
    <link rel="stylesheet" href="/assets/inventory-style.css">
    <link rel="stylesheet" href="/assets/sidebar.css">
    <link rel="stylesheet" href="/assets/topbar.css">
    <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.0.0-beta3/css/all.min.css">

    <!-- Font links (optimized preconnect) -->
    <link rel="preconnect" href="https://fonts.googleapis.com">
    <link rel="preconnect" href="https://fonts.gstatic.com" crossorigin>
    <link href="https://fonts.googleapis.com/css2?family=Dancing+Script:wght@400;700&display=swap" rel="stylesheet">
    <link href="https://fonts.googleapis.com/css2?family=IBM+Plex+Sans:wght@100;400;700&display=swap" rel="stylesheet">
    
    
    
</head>
<body>
    <%- include('partials/topbar') %>

    <div class="main-fb">
        <%- include('partials/sidebar') %>

        <div class="main-content">
          <h1>Inventory</h1>

            <!-- Inventory Status Section -->
            <section class="inventory-status">
                <div class="status out-of-stock">
                  <i class="fas fa-exclamation-circle" aria-hidden="true"></i>
                  <div class="status-text">
                    <span class="status-label">Out Of Stock</span>
                    <h2><%= outOfStockCount %></h2>
                  </div>
                </div>
                <div class="status low-stock">
                  <i class="fas fa-exclamation-triangle" aria-hidden="true"></i>
                  <div class="status-text">
                    <span class="status-label">Low Stock</span>
                    <h2><%= lowStockCount %></h2>
                  </div>
                </div>
                <div class="status in-stock">
                  <i class="fas fa-check-circle" aria-hidden="true"></i>
                  <div class="status-text">
                    <span class="status-label">In Stock</span>
                    <h2><%= sufficientStockCount %></h2>
                  </div>
                </div>
            </section>

            <!-- Inventory Table Section -->
            <section class="inventory-table">
                <div class="inventory-controls">
                    <!-- Add Item Button -->
                    <button class="add-item"><i class="fas fa-plus"></i> Add Item</button>
                    <button class="remove-filters">Remove Search</button>
                    
                    
                    <!-- Search Bar -->
                    <div class="search-bar">
                        <input type="text" id="searchInput" placeholder="Search items..." aria-label="Search inventory">
                        <i class="fas fa-search search-icon"></i>
                    </div>

                    <!-- Sorting and Filtering Controls -->
                    <div class="sorting-controls">
                        <select id="sortBy" aria-label="Sort items" onchange="applySorting()">
                          <option value="" <%= sortBy === '' ? 'selected' : '' %>>Sort by:</option>
                          <option value="alphabetical" <%= sortBy === 'alphabetical' ? 'selected' : '' %>>Alphabetical (A-Z)</option>
                          <option value="price-asc" <%= sortBy === 'price-asc' ? 'selected' : '' %>>Price Ascending</option>
                          <option value="price-desc" <%= sortBy === 'price-desc' ? 'selected' : '' %>>Price Descending</option>
                        </select>
                    </div>

                    <select class = "filter-controls" id="filterBy" aria-label="Filter items" onchange="applyFilter()">
                      <option value="" <%= filterBy === '' ? 'selected' : '' %>>Filter by:</option>
                      <option value="out-of-stock" <%= filterBy === 'out-of-stock' ? 'selected' : '' %>>Out of Stock</option>
                      <option value="low-stock" <%= filterBy === 'low-stock' ? 'selected' : '' %>>Low Stock</option>
                      <option value="in-stock" <%= filterBy === 'in-stock' ? 'selected' : '' %>>In Stock</option>
                    </select>

                      <select class = "category-controls" id="categoryFilter" aria-label="Filter by Category" onchange="applyCategoryFilter()">
                        <option value="">By Categories:</option>
                        <% categories.forEach(category => { %>
                          <option value="<%= category %>" <%= categoryFilter === category ? 'selected' : '' %>><%= category %></option>
                        <% }) %>
                      </select>
                    
                        
                    </div>

                    <!-- Inventory Grid -->
                <div class="inventory-grid" id="inventoryGrid">
                  <% if (inventory && inventory.length > 0) { %>
                    <% inventory.forEach(item => { %>
                      <div class="item-card <%= item.branchStored %>"
                          data-id="<%= item._id %>" 
                           data-name="<%= item.name %>" 
                           data-category="<%= item.category %>"
                           data-price="<%= item.price %>"
                           data-quantity="<%= item.quantity %>"
                           data-lowstockthreshold="<%= item.lowStockThreshold %>"
                           data-measurementunit="<%= item.measurementUnit %>"
                           data-branch="<%= item.branchStored %>">
                        <div class="card-header">
                          <span class="item-label"><%= item.category %></span>
                          
                          <!-- Correct background color handling -->
                          <span class="item-dot 
                              <%= item.quantity === 0 ? 'red' 
                              : item.quantity <= item.lowStockThreshold ? 'orange' 
                              : 'green' %>">
                          </span>
                        </div>
                        <span class="item-name"><%= item.name %></span>
                        <p>In Stock: <%= item.quantity %> <%= item.measurementUnit %></p>
                        <p>Price: ₱<%= item.price.toFixed(2) %></p>
                        <p>Total Value: ₱<%= (item.quantity * item.price).toFixed(2) %></p>
                        
                        
                        <div class="card-menu">
                          <i class="fas fa-ellipsis-h"></i>
                        </div>
                      </div>
                    <% }) %>
                  <% } else { %>
                    <p>No items found.</p>
                  <% } %>
                </div>

                    <!-- Add Item Modal -->
                    <div id="addItemModal" class="modal">
                        <div class="modal-content">
                          <span class="close" aria-label="Close modal">&times;</span>
                          <h2>Add New Item</h2>
                          <form id="addItemForm" action="/add-item" method="POST">
                            <label for="name">Item Name</label>
                            <input type="text" id="name" name="name" required>
                            
                            <label for="category">Category</label>
                            <input type="text" id="category" name="category" required>
                            
                            <label for="price">Price per Unit</label>
                            <input type="number" id="price" name="price" min="0" step="0.01" required>
                            
                            <label for="quantityInStock">Quantity In Stock</label>
                            <input type="number" id="quantity" name="quantity" min="0" required>
                            
                            <label for="lowStockThreshold">Low Stock Threshold</label>
                            <input type="number" id="lowStockThreshold" name="lowStockThreshold" min="0" required>
                            
                            <label for="measurementUnit">Measurement Unit</label>
                            <input type="text" id="measurementUnit" name="measurementUnit" required>

                            <input type="hidden" id="selectedBranch" name="branchStored" value="<%= selectedBranch %>">
                            
                            <button type="submit">Add Item</button>
                          </form>
                        </div>
                    </div>
                </div>

                <!-- Stock In/Out Modal -->
                <div id="stockInOutModal" class="modal">
                  <div class="modal-content">
                      <span class="close" id="stockInOutClose">&times;</span>
                      <h2>Adjust Stock</h2>
                      <div class="stock-adjustment">
                          <button id="decrementBtn">-</button>
                          <span id="stockCount">0</span>
                          <button id="incrementBtn">+</button>
                      </div>
                      <button id="confirmStockBtn">Confirm</button>
                  </div>
                </div>

                
              </div>
            </section>

            <!-- Item On Click Modal -->
            <div id="viewItemModal" class="modal">
                <div class="modal-content">
                    <span class="close">&times;</span>
                    <h2>Item Details</h2>
                    
                    <form id="viewItemForm">
                        <label for="name">Item Name</label>
                        <input type="text" id="viewName" name="name" readonly>
                        
                        <label for="category">Category</label>
                        <input type="text" id="viewCategory" name="category" readonly>
                        
                        <label for="price">Price</label>
                        <input type="number" id="viewPrice" name="price" readonly>
                        
                        <label for="quantityInStock">Quantity In Stock</label>
                        <input type="number" id="viewQuantity" name="quantity" readonly>
                        
                        <label for="lowStockThreshold">Low Stock Threshold</label>
                        <input type="number" id="viewLowStockThreshold" name="lowStockThreshold" readonly>
                        
                        <label for="measurementUnit">Measurement Unit</label>
                        <input type="text" id="viewMeasurementUnit" name="measurementUnit" readonly>
                        
                        <input type="hidden" id="viewSelectedBranch" name="branchStored">
                        <input type="hidden" id="viewItemId" name="id">
                        
                        <div class="button-group">
                            <button type="button" id="editItemBtn">Edit</button>
                            <button type="button" id="deleteItemBtn">Delete</button>
                            <button type="button" id="stockInBtn">Stock In/Out</button>
                            <button type="button" id="applyBtn">Apply</button>
                        </div>
                    </form>
                </div>
              </div>
        </div>
    </div>

<script>
    // ADD Modal functionality
    const addItemModal = document.getElementById("addItemModal");
    const addItemBtn = document.querySelector(".add-item");
    const addItemClose = addItemModal.querySelector(".close");
    const addItemForm = document.getElementById('addItemForm');
    const itemNameInput = document.getElementById('name');  

    document.addEventListener('DOMContentLoaded', () => {
        const removeFiltersButton = document.querySelector('.remove-filters');

        removeFiltersButton.addEventListener('click', () => {
            // Redirect to the inventory route
            window.location.href = '/inventory';
        });
    });


    function applyFilter() {
    const filterBy = document.getElementById('filterBy').value;
    const searchParams = new URLSearchParams(window.location.search);
    searchParams.set('filterBy', filterBy); // Set the filter option in the query
    window.location.search = searchParams.toString(); // Reload the page with the updated query
  }

    function applySorting() {
    const sortBy = document.getElementById('sortBy').value;
    const searchParams = new URLSearchParams(window.location.search);
    searchParams.set('sortBy', sortBy); // Set the sorting option in the query
    window.location.search = searchParams.toString(); // Reload the page with the updated query
  }

  function applyCategoryFilter() {
  const category = document.getElementById('categoryFilter').value;
  const sortBy = document.getElementById('sortBy').value;
  const filterBy = document.getElementById('filterBy').value;

  window.location.href = `/inventory?sortBy=${sortBy}&filterBy=${filterBy}&category=${category}`;
}

    addItemForm.addEventListener('submit', (event) => {
        // Prevent form from submitting immediately
        event.preventDefault();

        // Get the name entered by the user
        const newItemName = itemNameInput.value.trim().toLowerCase();

        // Check if an item with the same name exists in the inventory
        const existingItems = document.querySelectorAll('.item-card');
        let itemExists = false;

        existingItems.forEach(item => {
            const existingItemName = item.getAttribute('data-name').toLowerCase();
            if (existingItemName === newItemName) {
                itemExists = true;
            }
        });

        if (itemExists) {
            alert('This item already exists in the inventory.');
        } else {
            // If the item name is unique, submit the form (or do an AJAX request)
            addItemForm.submit();  // Or use fetch to submit the form via AJAX
        }
    });

    // Open the Add Item modal when the "Add Item" button is clicked
    addItemBtn.onclick = function() {
        addItemModal.style.display = "block";
    }

    // Close the Add Item modal when the "x" span is clicked
    addItemClose.onclick = function() {
        addItemModal.style.display = "none";
    }

    // Close the Add Item modal when clicking outside of it
    window.onclick = function(event) {
        if (event.target == addItemModal) {
            addItemModal.style.display = "none";
        }
    }

    document.addEventListener('DOMContentLoaded', () => {
        const itemCards = document.querySelectorAll('.item-card');  // Select all item cards
        const viewItemModal = document.getElementById('viewItemModal');      // Modal element
        const closeViewModal = viewItemModal.querySelector('.close');            // Close button

        // Button elements
        const editItemBtn = document.getElementById('editItemBtn');
        const applyBtn = document.getElementById('applyBtn');
        applyBtn.disabled = true;
        const deleteItemBtn = document.getElementById('deleteItemBtn');

        // Modal input fields
        const viewName = document.getElementById('viewName');
        const viewCategory = document.getElementById('viewCategory');
        const viewPrice = document.getElementById('viewPrice');
        const viewQuantity = document.getElementById('viewQuantity');
        const viewLowStockThreshold = document.getElementById('viewLowStockThreshold');
        const viewMeasurementUnit = document.getElementById('viewMeasurementUnit');
        const viewSelectedBranch = document.getElementById('viewSelectedBranch');

        const stockInOutModal = document.getElementById('stockInOutModal');
        const stockInOutClose = document.getElementById('stockInOutClose');
        const incrementBtn = document.getElementById('incrementBtn');
        const decrementBtn = document.getElementById('decrementBtn');
        const stockCount = document.getElementById('stockCount');
        const confirmStockBtn = document.getElementById('confirmStockBtn');
        const stockInOutBtn = document.getElementById('stockInBtn');

     

  

    

        let currentItem = {};

        const disableFields = () => {
            viewName.readOnly = true;
            viewCategory.readOnly = true;
            viewPrice.readOnly = true;
            viewQuantity.readOnly = true;
            viewLowStockThreshold.readOnly = true;
            viewMeasurementUnit.readOnly = true;

            // Add CSS class if needed
            // document.querySelectorAll('#viewItemForm input').forEach(input => {
            //     input.classList.add('readonly-input');
            // });
        }

        const enableFields = () => {
            viewName.readOnly = false;
            viewCategory.readOnly = false;
            viewPrice.readOnly = false;
            viewQuantity.readOnly = false;
            viewLowStockThreshold.readOnly = false;
            viewMeasurementUnit.readOnly = false;

            // Remove CSS class if needed
            // document.querySelectorAll('#viewItemForm input').forEach(input => {
            //     input.classList.remove('readonly-input');
            // });
        }

        const openStockInOutModal = () => {
            stockCount.textContent = '0'; // Reset count to zero
            stockInOutModal.style.display = 'block';
        };

        const closeStockInOutModal = () => {
            stockInOutModal.style.display = 'none';
        };

        // Event listener to open Stock In/Out Modal when "Stock In/Out" button is clicked
        stockInOutBtn.addEventListener('click', () => {
            // Store the current item's data
            currentItem = {
                name: viewName.value,
                branchStored: viewSelectedBranch.value,
                currentQuantity: parseInt(viewQuantity.value)
            };
            openStockInOutModal();
        });

        // Event listener to close the Stock In/Out Modal when 'x' is clicked
        stockInOutClose.addEventListener('click', closeStockInOutModal);

        // Close the Stock In/Out modal when clicking outside of it
        window.addEventListener('click', (event) => {
            if (event.target === stockInOutModal) {
                closeStockInOutModal();
            }
        });

        // Increment button functionality
        incrementBtn.addEventListener('click', () => {
            let count = parseInt(stockCount.textContent);
            count += 1;
            stockCount.textContent = count.toString();
        });

        // Decrement button functionality
        decrementBtn.addEventListener('click', () => {
            let count = parseInt(stockCount.textContent);
            if (count > 0) { // Prevent negative adjustment
                count -= 1;
                stockCount.textContent = count.toString();
            }
        });

        // Confirm Stock Adjustment
        confirmStockBtn.addEventListener('click', async () => {
            const adjustment = parseInt(stockCount.textContent);
            if (isNaN(adjustment)) {
                alert('Invalid adjustment number.');
                return;
            }

            // Calculate the new quantity
            const newQuantity = currentItem.currentQuantity + adjustment;

            // Optional: Prevent negative stock
            if (newQuantity < 0) {
                alert('Resulting stock cannot be negative.');
                return;
            }

            // Prepare data to send to the server
            const updateData = {
                name: currentItem.name,
                branchStored: currentItem.branchStored,
                adjustment: adjustment // Positive for stock in, negative for stock out
            };

            try {
                const response = await fetch('/stock-adjust', { // Ensure this route exists on your server
                    method: 'POST',
                    headers: {
                        'Content-Type': 'application/json'
                    },
                    body: JSON.stringify(updateData)
                });

                if (response.ok) {
                    const updatedItem = await response.json();

                    // Update the modal with the new quantity
                    viewQuantity.value = updatedItem.quantity;

                    alert('Stock updated successfully!');
                    window.location.reload();
                  } else {
                    const errorData = await response.json();
                    alert('Failed to update stock: ' + errorData.message);
                }
            } catch (error) {
                console.error('Error updating stock:', error);
                alert('An error occurred while updating stock.');
            }
        });

        // Add event listeners to each item card
        itemCards.forEach(card => {
        card.addEventListener('click', () => {
          // Set the modal fields with the clicked item's data
          viewName.value = card.getAttribute('data-name');
          viewCategory.value = card.getAttribute('data-category');
          viewPrice.value = card.getAttribute('data-price');
          viewQuantity.value = card.getAttribute('data-quantity');
          viewLowStockThreshold.value = card.getAttribute('data-lowstockthreshold');
          viewMeasurementUnit.value = card.getAttribute('data-measurementunit');
          viewSelectedBranch.value = card.getAttribute('data-branch');
          viewItemId.value = card.getAttribute('data-id'); 

          disableFields(); // Ensure fields are readonly when modal opens
          viewItemModal.style.display = 'block';
        });
      });

        // Close the View Item modal when the close button is clicked
        closeViewModal.addEventListener('click', () => {
          viewItemModal.style.display = 'none';
        });

        // Close the View Item modal when clicking outside of the modal content
        window.addEventListener('click', (event) => {
          if (event.target === viewItemModal) {
            viewItemModal.style.display = 'none';
          }
        });

        // Handle the "Edit" button click to enable fields and enable the "Apply" button
        editItemBtn.addEventListener('click', () => {
          enableFields();
          applyBtn.disabled = false;  // Enable "Apply" button
        });

        // Handle the "Apply" button click to send updated data to the server
        applyBtn.addEventListener('click', async () => {
  const updatedItem = {
    _id: viewItemId.value, // Use the MongoDB _id field
    name: viewName.value,
    category: viewCategory.value,
    price: parseFloat(viewPrice.value),
    quantity: parseInt(viewQuantity.value),
    lowStockThreshold: parseInt(viewLowStockThreshold.value),
    measurementUnit: viewMeasurementUnit.value,
    branchStored: viewSelectedBranch.value
  };

  try {
    const response = await fetch('/update-item', {
      method: 'POST',
      headers: {
        'Content-Type': 'application/json'
      },
      body: JSON.stringify(updatedItem)
    });

    if (response.ok) {
      alert('Item updated successfully!');
      viewItemModal.style.display = 'none';
      location.reload(); // Reload the page to reflect changes
    } else {
      alert('Failed to update the item.');
    }
  } catch (error) {
    console.error('Error updating item:', error);
    alert('An error occurred while updating the item.');
  }
});

        // Handle the "Delete" button click to delete the item
        deleteItemBtn.addEventListener('click', async () => {
            const name = document.getElementById('viewName').value;
            const branchStored = document.getElementById('viewSelectedBranch').value;

            const confirmDelete = confirm(`Are you sure you want to delete the item: ${name}?`);
            if (!confirmDelete) return;

            try {
              const response = await fetch('/delete-item', {
                method: 'DELETE',
                headers: {
                  'Content-Type': 'application/json',
                },
                body: JSON.stringify({ name, branchStored }),  // Pass the item name and branch in the request body
              });

              const data = await response.json();
              if (response.ok) {
                alert('Item deleted successfully');
                window.location.reload();  // Reload the page or update the inventory UI
              } else {
                alert('Failed to delete the item: ' + data.message);
              }
            } catch (error) {
              console.error('Error deleting item:', error);
              alert('An error occurred while trying to delete the item.');
            }
        });

        // Handle search functionality
        const searchInput = document.querySelector('.search-bar input'); // Assuming this is your search input field
        const searchIcon = document.querySelector('.search-icon'); // Assuming this is your search icon
        const searchEnter = document.querySelector('.search-bar');

        searchEnter.addEventListener('keydown', (event) => {
          const searchTerm = searchInput.value.trim();

          if (event.key === 'Enter') {
            window.location.href = `/inventory?search=${encodeURIComponent(searchTerm)}`;
          }
        });

        searchIcon.addEventListener('click', () => {
            const searchTerm = searchInput.value.trim();

            if (searchTerm) {
              // Redirect to the inventory route with the search term as a query parameter
              window.location.href = `/inventory?search=${encodeURIComponent(searchTerm)}`;
            }
        });

        

    });
</script>
</body>
</html>
